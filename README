I like exploring ideas by compulsively writing code. GObject provides a way to
do inheritance based higher level programming; at the cost of having to write
quite a bit of boiler plate.

This is an experiment in writing a dynamically configurable type system in C where capabilities can be added and removed on instances at runtime.

Encapsulation within an instance is done by developing orthogonal capabilities
that each carry state and has methods per instance.

Some core capabilities:

LIST     - provides a container API and storage of pointers, allows to register
           a destruction function when items are removed.

REFCOUNT - provides reference counting mechanism that is added implicitly when
           oi_ref(oi) is called. Calling oi_unref(oi) without having a reference
           causes direct destruction without allocating the memory needed to
           keep reference counting state.

PROPERTIES - provides implictly created storage for key/value pairs of
           floats,ints, strings, pointers and oi instances. Does not have
           a proper concept of paramspecs yet.

MESSAGE  - signalling mechanism - capabilities can listen for messages emitted
           on the instance itself or on other instances. Use of messages permits
           a form of polymorphism by swapping out capabilities responding
           to given messages. Messages created by capabilities should be 
           associated with the capability, this makes the message listener 
           automatically be destroyed when the listener is destroyed.
           Weak references can be implemented by attaching to an objects
           "oi:die" signal for full instances or by listening for
           "oi:remove-capability".

Building additional capabilities s that can be instantiated alone (like the 
list can) or capabilitiess that cooperate among other capabilitiess in an
object as well as with other objects permits flexible creation of dynamic
structures.

Performance
-----------

Performance of the system seems to be good, comparison with roughly equivalent
gobject code indicates that this systems overhead is smaller. (see test in
examples/).
